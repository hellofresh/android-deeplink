/*
 * Copyright (c) 2019.  The HelloFresh Android Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    dependencies {
        classpath(libs.agp)
        classpath(libs.kotlinGradle)
        classpath(libs.unmockGradle)
        classpath(libs.mavenPublishGradle)
    }
}

plugins {
    alias(libs.plugins.detekt)
    alias(libs.plugins.dokka).apply(false)
    alias(libs.plugins.junitJacoco)
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions.jvmTarget = "1.8"
}

detekt {
    buildUponDefaultConfig = true
}

tasks.withType<io.gitlab.arturbosch.detekt.Detekt> {
    reports {
        xml.required.set(true) // checkstyle like format mainly for integrations like Jenkins
        sarif.required.set(false) // support integrations with Github Code Scanning
    }
}

extensions.findByName("buildScan")?.withGroovyBuilder {
    setProperty("termsOfServiceUrl", "https://gradle.com/terms-of-service")
    setProperty("termsOfServiceAgree", "yes")
}

junitJacoco {
    jacocoVersion = libs.versions.jacoco.get()
    excludes = listOf(
        // Android
        "**/R.class",
        "**/R$*.class",
        "**/BuildConfig.*",
        "**/Manifest*.*",
        // Others
        "**/*\$Companion.class",
        "**/*Lambda$*.*", // Jacoco can not handle several "$" in class name.
        "**/*$*$*.*" // Anonymous classes generated by kotlin)
    )
}

subprojects {
    group = extra.getValue("GROUP")
    version = extra.getValue("VERSION_NAME")

    tasks.withType<org.jetbrains.dokka.gradle.DokkaTask> {
        dokkaSourceSets.all {
            noAndroidSdkLink.set(false)
        }
    }

    plugins.withId("com.vanniktech.maven.publish.base") {
        configure<com.vanniktech.maven.publish.MavenPublishBaseExtension> {
            publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.S01)
            signAllPublications()
            pom {
                name.set(project.name)
                description.set("Deeplink processing library")
                url.set("https://github.com/kingsleyadio/android-deeplink")

                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("kingsleyadio")
                        name.set("Kingsley Adio")
                        email.set("adiksonline@gmail.com")
                    }
                }
            }
        }
    }
}

inline fun <reified T> ExtraPropertiesExtension.getValue(key: String) = get(key) as T
